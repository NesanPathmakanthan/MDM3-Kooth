import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Parameters
n_users = 500
n_content = 1000
topics = ["Anxiety", "LGBTQ+", "Neurodiversity","Depression"]
content_types = ["Article", "Forum", "Article Comment", "Forum Comment"]

# Generate synthetic data
np.random.seed(42)
    "Views": np.random.poisson(20, n_content),

# Define topic-based engagement patterns
topic_engagement = {
    "Anxiety": {"views_mean": 50, "comments_mean": 10},
    "LGBTQ+": {"views_mean": 30, "comments_mean": 8},
    "Neurodiversity": {"views_mean": 20, "comments_mean": 5},
    "Depression": {"views_mean": 40, "comments_mean": 7},
}

# Define topic-based user clusters (e.g., users focused on certain topics)
topic_user_weights = {
    "Anxiety": [f"SU{i}" for i in range(1, 200)],
    "LGBTQ+": [f"SU{i}" for i in range(201, 300)],
    "Neurodiversity": [f"SU{i}" for i in range(301, 400)],
    "Depression": [f"SU{i}" for i in range(401, 500)],
}

# Define topic-based content type probabilities
topic_content_type_probs = {
    "Anxiety": [0.6, 0.2, 0.1, 0.1],
    "LGBTQ+": [0.4, 0.3, 0.2, 0.1],
    "Neurodiversity": [0.3, 0.4, 0.1, 0.2],
    "Depression": [0.5, 0.3, 0.1, 0.1],
}

# Generate data
data = []
for i in range(n_content):
    # Randomly choose a topic
    topic = np.random.choice(topics, p=[0.3, 0.2, 0.2, 0.3])
    
    # Generate user based on topic
    user_id = np.random.choice(topic_user_weights[topic])
    
    # Generate content type based on topic
    content_type = np.random.choice(content_types, p=topic_content_type_probs[topic])
    
    # Generate views and comments based on topic engagement patterns
    views = max(0, np.random.poisson(topic_engagement[topic]["views_mean"]))
    comments = max(0, np.random.poisson(topic_engagement[topic]["comments_mean"]))
    
    # Generate timestamps
    created_timestamp = datetime(2024, 9, 1) + timedelta(hours=np.random.randint(0, 720))
    moderated_timestamp = created_timestamp + timedelta(hours=np.random.randint(1, 48))
    
    # Generate ancestor content ID for comments
    ancestor_content_id = (
        np.random.randint(1, i) if content_type in ["Article Comment", "Forum Comment"] and i > 1 else None
    )
    
    # Add entry to data
    data.append({
        "Content_Created_ID": i + 1,
        "Created_Timestamp": created_timestamp,
        "Moderated_Timestamp": moderated_timestamp,
        "Service_User_ID": user_id,
        "Content_Topic": topic,
        "Content_Type": content_type,
        "Views": views,
        "Comments": comments,
        "Ancestor_Content_ID": ancestor_content_id,
    })

# Create DataFrame
df = pd.DataFrame(data)

# Save the DataFrame to a CSV file
file_path = "/Users/isobelbridge/Documents/mdm4/simulated_kooth_data.csv"
df.to_csv(file_path, index=False)

print(f"File saved to: {file_path}")
